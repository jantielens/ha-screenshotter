name: Webserver Tests
on:
  workflow_call:
    inputs:
      screenshots_subfolder:
        description: 'Subfolder name inside /media where screenshots are written'
        type: string
        required: false
        default: 'ha-screenshotter'

jobs:
  test-webserver-matrix:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "default-port"
            port: 3000
            expect_failure: false
          - name: "custom-port"
            port: 6666
            expect_failure: false
          - name: "invalid-port"
            port: '"abcd"'
            expect_failure: true
          - name: "checksum-consistency"
            port: 3000
            expect_failure: false
            verify_checksum_consistency: true
    
    env:
      SCREENSHOT_SUBFOLDER: ${{ inputs.screenshots_subfolder }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup test environment
        uses: ./.github/actions/setup-test-env
        with:
          docker-image-name: ha-screenshotter-webserver-${{ matrix.config.name }}-test

      - name: Test webserver configuration
        uses: ./.github/actions/test-webserver-port
        with:
          port: ${{ matrix.config.port }}
          test-name: ${{ matrix.config.name }}
          screenshot-subfolder: ${{ inputs.screenshots_subfolder }}
          docker-image: ha-screenshotter-webserver-${{ matrix.config.name }}-test
          expect-failure: ${{ matrix.config.expect_failure }}

      - name: Verify checksum consistency
        if: matrix.config.verify_checksum_consistency == true && matrix.config.expect_failure == false
        run: |
          echo "===================="
          echo "CHECKSUM CONSISTENCY TEST"
          echo "===================="
          echo "Downloading screenshot twice and comparing checksums..."
          
          # First download
          echo "First download..."
          curl -f -s "http://localhost:${{ matrix.config.port }}/screenshots/0.png" -o "checksum-test-1.png"
          curl -f -s "http://localhost:${{ matrix.config.port }}/screenshots/0.png.crc32" -o "checksum-test-1.crc32"
          CHECKSUM_1=$(cat checksum-test-1.crc32)
          SIZE_1=$(stat -c%s checksum-test-1.png)
          echo "  Checksum 1: $CHECKSUM_1"
          echo "  Size 1: $SIZE_1 bytes"
          
          # Wait a moment
          sleep 2
          
          # Second download
          echo "Second download..."
          curl -f -s "http://localhost:${{ matrix.config.port }}/screenshots/0.png" -o "checksum-test-2.png"
          curl -f -s "http://localhost:${{ matrix.config.port }}/screenshots/0.png.crc32" -o "checksum-test-2.crc32"
          CHECKSUM_2=$(cat checksum-test-2.crc32)
          SIZE_2=$(stat -c%s checksum-test-2.png)
          echo "  Checksum 2: $CHECKSUM_2"
          echo "  Size 2: $SIZE_2 bytes"
          
          # Compare checksums
          echo ""
          echo "Comparing checksums..."
          if [ "$CHECKSUM_1" = "$CHECKSUM_2" ]; then
            echo "✅ Checksums match: $CHECKSUM_1 = $CHECKSUM_2"
          else
            echo "❌ Checksums DO NOT match: $CHECKSUM_1 != $CHECKSUM_2"
            exit 1
          fi
          
          # Compare file sizes
          if [ "$SIZE_1" = "$SIZE_2" ]; then
            echo "✅ File sizes match: $SIZE_1 = $SIZE_2 bytes"
          else
            echo "❌ File sizes DO NOT match: $SIZE_1 != $SIZE_2 bytes"
            exit 1
          fi
          
          # Binary comparison of files
          if cmp -s checksum-test-1.png checksum-test-2.png; then
            echo "✅ Binary content is identical"
          else
            echo "❌ Binary content differs (but checksums match - this is expected for PNG metadata differences)"
          fi
          
          echo ""
          echo "✅ Checksum consistency test PASSED"
          echo "   Same URL produces identical checksums for identical content"

      - name: Verify CRC32 history endpoint
        if: matrix.config.verify_checksum_consistency == true && matrix.config.expect_failure == false
        run: |
          echo "===================="
          echo "CRC32 HISTORY ENDPOINT TEST"
          echo "===================="
          echo "Testing /checksums and /checksums/:index endpoints..."
          
          # Test /checksums endpoint
          echo ""
          echo "Testing /checksums endpoint..."
          curl -f -s "http://localhost:${{ matrix.config.port }}/checksums" -o "checksums-all.json"
          
          if [ -f "checksums-all.json" ]; then
            echo "✅ Successfully downloaded checksums summary"
            echo "Response content:"
            cat checksums-all.json | jq '.' || cat checksums-all.json
            
            # Verify JSON structure
            if cat checksums-all.json | jq -e '.checksums' > /dev/null 2>&1; then
              echo "✅ Response contains 'checksums' field"
            else
              echo "❌ Response missing 'checksums' field"
              exit 1
            fi
            
            if cat checksums-all.json | jq -e '.timestamp' > /dev/null 2>&1; then
              echo "✅ Response contains 'timestamp' field"
            else
              echo "❌ Response missing 'timestamp' field"
              exit 1
            fi
            
            if cat checksums-all.json | jq -e '.history_length' > /dev/null 2>&1; then
              HISTORY_LENGTH=$(cat checksums-all.json | jq -r '.history_length')
              echo "✅ Response contains 'history_length' field: $HISTORY_LENGTH"
              
              if [ "$HISTORY_LENGTH" = "500" ]; then
                echo "✅ History length is 500 as expected"
              else
                echo "❌ History length is $HISTORY_LENGTH, expected 500"
                exit 1
              fi
            else
              echo "❌ Response missing 'history_length' field"
              exit 1
            fi
          else
            echo "❌ Failed to download checksums summary"
            exit 1
          fi
          
          # Test /checksums/:index endpoint
          echo ""
          echo "Testing /checksums/0 endpoint..."
          curl -f -s "http://localhost:${{ matrix.config.port }}/checksums/0" -o "checksums-0-history.json"
          
          if [ -f "checksums-0-history.json" ]; then
            echo "✅ Successfully downloaded CRC32 history for screenshot 0"
            echo "Response content:"
            cat checksums-0-history.json | jq '.' || cat checksums-0-history.json
            
            # Verify JSON structure
            if cat checksums-0-history.json | jq -e '.screenshot_index' > /dev/null 2>&1; then
              SCREENSHOT_INDEX=$(cat checksums-0-history.json | jq -r '.screenshot_index')
              echo "✅ Response contains 'screenshot_index' field: $SCREENSHOT_INDEX"
              
              if [ "$SCREENSHOT_INDEX" = "0" ]; then
                echo "✅ Screenshot index is 0 as expected"
              else
                echo "❌ Screenshot index is $SCREENSHOT_INDEX, expected 0"
                exit 1
              fi
            else
              echo "❌ Response missing 'screenshot_index' field"
              exit 1
            fi
            
            if cat checksums-0-history.json | jq -e '.history' > /dev/null 2>&1; then
              echo "✅ Response contains 'history' field"
              
              # Check if history is an array
              if cat checksums-0-history.json | jq -e '.history | type' | grep -q "array"; then
                echo "✅ History field is an array"
                
                HISTORY_COUNT=$(cat checksums-0-history.json | jq '.history | length')
                echo "   History entries: $HISTORY_COUNT"
                
                if [ "$HISTORY_COUNT" -gt 0 ]; then
                  echo "✅ History contains $HISTORY_COUNT entry/entries"
                  
                  # Verify first entry structure
                  if cat checksums-0-history.json | jq -e '.history[0].timestamp' > /dev/null 2>&1 && \
                     cat checksums-0-history.json | jq -e '.history[0].crc32' > /dev/null 2>&1; then
                    FIRST_TIMESTAMP=$(cat checksums-0-history.json | jq -r '.history[0].timestamp')
                    FIRST_CRC32=$(cat checksums-0-history.json | jq -r '.history[0].crc32')
                    echo "✅ History entry contains 'timestamp' and 'crc32' fields"
                    echo "   First entry: timestamp=$FIRST_TIMESTAMP, crc32=$FIRST_CRC32"
                  else
                    echo "❌ History entry missing required fields"
                    exit 1
                  fi
                else
                  echo "⚠️  History is empty (no screenshots captured yet)"
                fi
              else
                echo "❌ History field is not an array"
                exit 1
              fi
            else
              echo "❌ Response missing 'history' field"
              exit 1
            fi
            
            if cat checksums-0-history.json | jq -e '.count' > /dev/null 2>&1; then
              echo "✅ Response contains 'count' field"
            else
              echo "❌ Response missing 'count' field"
              exit 1
            fi
            
            if cat checksums-0-history.json | jq -e '.max_length' > /dev/null 2>&1; then
              MAX_LENGTH=$(cat checksums-0-history.json | jq -r '.max_length')
              echo "✅ Response contains 'max_length' field: $MAX_LENGTH"
            else
              echo "❌ Response missing 'max_length' field"
              exit 1
            fi
          else
            echo "❌ Failed to download CRC32 history for screenshot 0"
            exit 1
          fi
          
          echo ""
          echo "✅ CRC32 history endpoint test PASSED"
          echo "   Both /checksums and /checksums/:index endpoints are working correctly"

      - name: Cleanup container
        if: always() && matrix.config.expect_failure == false
        run: |
          echo "Stopping and removing container..."
          docker stop ha-screenshotter-${{ matrix.config.name }} || true
          docker rm ha-screenshotter-${{ matrix.config.name }} || true

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: webserver-${{ matrix.config.name }}-test-results
          path: |
            webserver-${{ matrix.config.name }}/
            downloaded-${{ matrix.config.name }}-screenshot.png
            downloaded-${{ matrix.config.name }}-checksum.crc32
            downloaded-${{ matrix.config.name }}-checksum2.crc32
            checksum-test-*.png
            checksum-test-*.crc32
            checksums-all.json
            checksums-0-history.json
            webserver_${{ matrix.config.name }}_summary.md
          retention-days: 7

      - name: Add test summary to job summary
        if: always()
        run: |
          if [ -f webserver_${{ matrix.config.name }}_summary.md ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Webserver Test: ${{ matrix.config.name }}" >> $GITHUB_STEP_SUMMARY
            cat webserver_${{ matrix.config.name }}_summary.md >> $GITHUB_STEP_SUMMARY
          fi
