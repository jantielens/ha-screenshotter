name: CI - Build and Test

# NOTE: Configuration validation is strict - invalid values cause container shutdown
# Tests include both success and failure scenarios to verify validation behavior
# NEW: Added comprehensive per-URL configuration tests for object format, array with objects,
#      mixed settings, and validation of per-URL parameters
# NEW: Added comprehensive cropping functionality tests including:
#      - Basic cropping with various dimensions
#      - Cropping combined with rotation, grayscale, and bit depth
#      - Global crop settings vs per-URL overrides
#      - Error validation for invalid crop parameters

# Trigger on manual dispatch only
on:
  workflow_dispatch:
    inputs:
      run_all_tests:
        description: 'Run all test scenarios (ignore other inputs)'
        required: false
        default: true
        type: boolean
      test_url:
        description: 'URL to test screenshot functionality (single test mode)'
        required: false
        default: 'https://github.com/jantielens/ha-screenshotter/'
      resolution_width:
        description: 'Screenshot width (single test mode)'
        required: false
        default: '1366'
      resolution_height:
        description: 'Screenshot height (single test mode)'
        required: false
        default: '768'
      rotation:
        description: 'Rotation degrees (single test mode)'
        required: false
        default: '90'
      grayscale:
        description: 'Enable grayscale (single test mode)'
        required: false
        default: true
        type: boolean
      bit_depth:
        description: 'Bit depth (single test mode)'
        required: false
        default: '4'
      screenshots_subfolder:
        description: 'Subfolder name inside /media where screenshots are written'
        required: false
        default: 'ha-screenshotter'

jobs:
  # Single test job for manual dispatch when run_all_tests is false
  single-test:
    if: ${{ github.event_name == 'workflow_dispatch' && !fromJson(github.event.inputs.run_all_tests || 'true') }}
    runs-on: ubuntu-latest
    env:
      SCREENSHOT_SUBFOLDER: ${{ github.event.inputs.screenshots_subfolder || 'ha-screenshotter' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up test directories
        run: |
            mkdir -p test-data test-share/$SCREENSHOT_SUBFOLDER

      - name: Create test configuration
        run: |
          cat > test-data/options.json << EOF
          {
            "schedule": "*/1 * * * *",
            "urls": "[\\\"${{ github.event.inputs.test_url || 'https://github.com/jantielens/ha-screenshotter/' }}\\\"]",
            "resolution_width": ${{ github.event.inputs.resolution_width || 1366 }},
            "resolution_height": ${{ github.event.inputs.resolution_height || 768 }},
            "rotation_degrees": ${{ github.event.inputs.rotation || 90 }},
            "grayscale": ${{ github.event.inputs.grayscale || true }},
            "bit_depth": ${{ github.event.inputs.bit_depth || 4 }},
            "run_once": true
          }
          EOF
          echo "Test configuration:"
          cat test-data/options.json

      - name: Build Docker container
        run: |
          cd ha-screenshotter
          docker build -t ha-screenshotter-test .

      - name: Test container startup and screenshot
        run: |
          echo "Starting container test with run_once mode..."
          docker run --rm \
            -v "${GITHUB_WORKSPACE}/test-data:/data" \
            -v "${GITHUB_WORKSPACE}/test-share:/media" \
            ha-screenshotter-test
          echo "Container run completed"

      - name: Verify screenshot output
        run: |
          echo "Checking for generated screenshots..."
          ls -la test-share/$SCREENSHOT_SUBFOLDER/

          if [ -f "test-share/$SCREENSHOT_SUBFOLDER/0.png" ]; then
            echo "✅ Screenshot generated successfully!"
            file test-share/$SCREENSHOT_SUBFOLDER/0.png || true
            if command -v identify &> /dev/null; then
              echo "Image details:"
              identify test-share/$SCREENSHOT_SUBFOLDER/0.png
            fi
            size=$(stat -c%s test-share/$SCREENSHOT_SUBFOLDER/0.png)
            echo "Screenshot file size: $size bytes"
            if [ "$size" -gt 1000 ]; then
              echo "✅ Screenshot appears to be valid (size > 1KB)"
            else
              echo "❌ Screenshot file seems too small"
              exit 1
            fi
          else
            echo "❌ No screenshot generated"
            echo "Contents of '${SCREENSHOT_SUBFOLDER}' directory:"
            ls -la test-share/$SCREENSHOT_SUBFOLDER/
            exit 1
          fi

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: single-test-screenshots
          path: test-share/${{ env.SCREENSHOT_SUBFOLDER }}/
          retention-days: 7

  # Matrix test job for comprehensive testing
  matrix-test:
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && fromJson(github.event.inputs.run_all_tests || 'true')) }}
    runs-on: ubuntu-latest
    env:
      SCREENSHOT_SUBFOLDER: ${{ github.event.inputs.screenshots_subfolder || 'ha-screenshotter' }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Valid parameter tests
          - name: "basic-test"
            description: "Single URL, no grayscale, full bit depth"
            urls: '[\\\"https://example.com\\\"]'
            resolution_width: 1366
            resolution_height: 768
            rotation_degrees: 0
            grayscale: false
            bit_depth: 8
            expected_result: "success"
            expected_files: 1
          
          - name: "multi-grayscale-medium"
            description: "Two URLs, grayscale, medium bit depth"
            urls: '[\\\"https://github.com/jantielens/ha-screenshotter\\\", \\\"https://example.com\\\"]'
            resolution_width: 1920
            resolution_height: 1080
            rotation_degrees: 90
            grayscale: true
            bit_depth: 4
            expected_result: "success"
            expected_files: 2
          
          - name: "multi-grayscale-minimal"
            description: "Two URLs, grayscale, minimal bit depth"
            urls: '[\\\"https://phet-dev.colorado.edu/html/build-an-atom/0.0.0-3/simple-text-only-test-page.html\\\", \\\"https://example.com\\\"]'
            resolution_width: 800
            resolution_height: 600
            rotation_degrees: 180
            grayscale: true
            bit_depth: 1
            expected_result: "success"
            expected_files: 2
          
          # Invalid parameter tests
          - name: "invalid-url"
            description: "Non-existent URL test"
            urls: '[\\\"https://nonexistent-test-domain-12345.com\\\"]'
            resolution_width: 1366
            resolution_height: 768
            rotation_degrees: 0
            grayscale: false
            bit_depth: 8
            expected_result: "failure"
            expected_files: 0
          
          - name: "malformed-urls"
            description: "Invalid JSON format for URLs"
            urls: 'invalid-json-format-not-an-array'
            resolution_width: 1366
            resolution_height: 768
            rotation_degrees: 0
            grayscale: false
            bit_depth: 8
            expected_result: "failure"
            expected_files: 0
          
          - name: "invalid-bit-depth"
            description: "Invalid bit depth value"
            urls: '[\\\"https://example.com\\\"]'
            resolution_width: 1366
            resolution_height: 768
            rotation_degrees: 0
            grayscale: true
            bit_depth: 99
            expected_result: "failure"  # Should now cause container shutdown
            expected_files: 0
          
          - name: "invalid-resolution-width"
            description: "Invalid negative resolution width"
            urls: '[\\\"https://example.com\\\"]'
            resolution_width: -100
            resolution_height: 768
            rotation_degrees: 0
            grayscale: false
            bit_depth: 8
            expected_result: "failure"
            expected_files: 0
          
          - name: "invalid-rotation"
            description: "Invalid rotation degrees"
            urls: '[\\\"https://example.com\\\"]'
            resolution_width: 1366
            resolution_height: 768
            rotation_degrees: 45
            grayscale: false
            bit_depth: 8
            expected_result: "failure"
            expected_files: 0
          
          # Per-URL configuration tests
          - name: "per-url-object-format"
            description: "Per-URL settings using object format"
            urls: '{\\\"https://example.com\\\": {\\\"width\\\": 800, \\\"height\\\": 600, \\\"grayscale\\\": true}, \\\"https://github.com/jantielens/ha-screenshotter\\\": {\\\"rotation\\\": 90}}'
            resolution_width: 1920
            resolution_height: 1080
            rotation_degrees: 0
            grayscale: false
            bit_depth: 8
            expected_result: "success"
            expected_files: 2
          
          - name: "per-url-array-with-objects"
            description: "Per-URL settings using array with objects format"
            urls: '[{\\\"url\\\": \\\"https://example.com\\\", \\\"width\\\": 1024, \\\"height\\\": 768}, \\\"https://github.com/jantielens/ha-screenshotter\\\"]'
            resolution_width: 1366
            resolution_height: 768
            rotation_degrees: 90
            grayscale: true
            bit_depth: 4
            expected_result: "success"
            expected_files: 2
          
          - name: "per-url-mixed-settings"
            description: "Per-URL with different bit depths and grayscale"
            urls: '{\\\"https://example.com\\\": {\\\"bit_depth\\\": 1, \\\"grayscale\\\": true}, \\\"https://github.com/jantielens/ha-screenshotter\\\": {\\\"bit_depth\\\": 8, \\\"rotation\\\": 180}}'
            resolution_width: 800
            resolution_height: 600
            rotation_degrees: 0
            grayscale: false
            bit_depth: 24
            expected_result: "success"
            expected_files: 2
          
          - name: "per-url-empty-settings"
            description: "Per-URL with empty settings (should use defaults)"
            urls: '{\\\"https://example.com\\\": {}, \\\"https://github.com/jantielens/ha-screenshotter\\\": null}'
            resolution_width: 1200
            resolution_height: 800
            rotation_degrees: 270
            grayscale: true
            bit_depth: 4
            expected_result: "success"
            expected_files: 2
          
          # Per-URL validation tests
          - name: "per-url-invalid-width"
            description: "Per-URL with invalid width value"
            urls: '{\\\"https://example.com\\\": {\\\"width\\\": -500}}'
            resolution_width: 1366
            resolution_height: 768
            rotation_degrees: 0
            grayscale: false
            bit_depth: 8
            expected_result: "failure"
            expected_files: 0
          
          - name: "per-url-invalid-rotation"
            description: "Per-URL with invalid rotation value"
            urls: '[{\\\"url\\\": \\\"https://example.com\\\", \\\"rotation\\\": 45}]'
            resolution_width: 1366
            resolution_height: 768
            rotation_degrees: 0
            grayscale: false
            bit_depth: 8
            expected_result: "failure"
            expected_files: 0
          
          - name: "per-url-invalid-bit-depth"
            description: "Per-URL with invalid bit depth"
            urls: '{\\\"https://example.com\\\": {\\\"bit_depth\\\": 32}}'
            resolution_width: 1366
            resolution_height: 768
            rotation_degrees: 0
            grayscale: false
            bit_depth: 8
            expected_result: "failure"
            expected_files: 0
          
          - name: "per-url-malformed-json"
            description: "Per-URL with malformed JSON structure"
            urls: '{\\\"https://example.com\\\": {\\\"width\\\": 800, \\\"height\\\": }}'
            resolution_width: 1366
            resolution_height: 768
            rotation_degrees: 0
            grayscale: false
            bit_depth: 8
            expected_result: "failure"
            expected_files: 0

          # Cropping functionality tests
          - name: "basic-crop-test"
            description: "Single URL with basic cropping"
            urls: '[{\\\"url\\\": \\\"https://example.com\\\", \\\"crop\\\": {\\\"x\\\": 100, \\\"y\\\": 50, \\\"width\\\": 400, \\\"height\\\": 300}}]'
            resolution_width: 1366
            resolution_height: 768
            rotation_degrees: 0
            grayscale: false
            bit_depth: 24
            expected_result: "success"
            expected_files: 1
            crop_test: true
            expected_crop_width: 400
            expected_crop_height: 300

          - name: "crop-with-rotation"
            description: "Cropping after 90-degree rotation"
            urls: '[{\\\"url\\\": \\\"https://example.com\\\", \\\"width\\\": 800, \\\"height\\\": 600, \\\"rotation\\\": 90, \\\"crop\\\": {\\\"x\\\": 50, \\\"y\\\": 100, \\\"width\\\": 200, \\\"height\\\": 300}}]'
            resolution_width: 1366
            resolution_height: 768
            rotation_degrees: 0
            grayscale: false
            bit_depth: 24
            expected_result: "success"
            expected_files: 1
            crop_test: true
            expected_crop_width: 200
            expected_crop_height: 300

          - name: "crop-header-only"
            description: "Crop to extract header section only"
            urls: '[{\\\"url\\\": \\\"https://example.com\\\", \\\"crop\\\": {\\\"x\\\": 0, \\\"y\\\": 0, \\\"width\\\": 1366, \\\"height\\\": 100}}]'
            resolution_width: 1366
            resolution_height: 768
            rotation_degrees: 0
            grayscale: false
            bit_depth: 24
            expected_result: "success"
            expected_files: 1
            crop_test: true
            expected_crop_width: 1366
            expected_crop_height: 100

          - name: "crop-with-grayscale"
            description: "Cropping with grayscale and bit depth reduction"
            urls: '[{\\\"url\\\": \\\"https://example.com\\\", \\\"crop\\\": {\\\"x\\\": 200, \\\"y\\\": 100, \\\"width\\\": 600, \\\"height\\\": 400}, \\\"grayscale\\\": true, \\\"bit_depth\\\": 8}]'
            resolution_width: 1920
            resolution_height: 1080
            rotation_degrees: 0
            grayscale: false
            bit_depth: 24
            expected_result: "success"
            expected_files: 1
            crop_test: true
            expected_crop_width: 600
            expected_crop_height: 400

          - name: "multi-url-different-crops"
            description: "Multiple URLs with different crop settings"
            urls: '[{\\\"url\\\": \\\"https://example.com\\\", \\\"crop\\\": {\\\"x\\\": 0, \\\"y\\\": 0, \\\"width\\\": 400, \\\"height\\\": 300}}, {\\\"url\\\": \\\"https://github.com/jantielens/ha-screenshotter\\\", \\\"crop\\\": {\\\"x\\\": 100, \\\"y\\\": 50, \\\"width\\\": 800, \\\"height\\\": 600}}]'
            resolution_width: 1366
            resolution_height: 768
            rotation_degrees: 0
            grayscale: false
            bit_depth: 24
            expected_result: "success"
            expected_files: 2
            crop_test: true

          - name: "multiple-url-crop-test"
            description: "Multiple URLs with same crop configuration via objects"
            urls: '[{\\\"url\\\": \\\"https://example.com\\\", \\\"crop\\\": {\\\"x\\\": 50, \\\"y\\\": 25, \\\"width\\\": 500, \\\"height\\\": 400}}, {\\\"url\\\": \\\"https://github.com/jantielens/ha-screenshotter\\\", \\\"crop\\\": {\\\"x\\\": 50, \\\"y\\\": 25, \\\"width\\\": 500, \\\"height\\\": 400}}]'
            resolution_width: 1366
            resolution_height: 768
            rotation_degrees: 0
            grayscale: false
            bit_depth: 24
            expected_result: "success"
            expected_files: 2
            crop_test: true
            expected_crop_width: 500
            expected_crop_height: 400

          # Cropping error cases
          - name: "invalid-crop-negative-coords"
            description: "Invalid crop with negative coordinates"
            urls: '[{\\\"url\\\": \\\"https://example.com\\\", \\\"crop\\\": {\\\"x\\\": -10, \\\"y\\\": 50, \\\"width\\\": 400, \\\"height\\\": 300}}]'
            resolution_width: 1366
            resolution_height: 768
            rotation_degrees: 0
            grayscale: false
            bit_depth: 24
            expected_result: "failure"
            expected_files: 0

          - name: "invalid-crop-zero-dimensions"
            description: "Invalid crop with zero width/height"
            urls: '[{\\\"url\\\": \\\"https://example.com\\\", \\\"crop\\\": {\\\"x\\\": 100, \\\"y\\\": 50, \\\"width\\\": 0, \\\"height\\\": 300}}]'
            resolution_width: 1366
            resolution_height: 768
            rotation_degrees: 0
            grayscale: false
            bit_depth: 24
            expected_result: "failure"
            expected_files: 0

          - name: "invalid-crop-exceeds-bounds"
            description: "Crop area exceeds image dimensions"
            urls: '[{\\\"url\\\": \\\"https://example.com\\\", \\\"crop\\\": {\\\"x\\\": 1000, \\\"y\\\": 500, \\\"width\\\": 800, \\\"height\\\": 600}}]'
            resolution_width: 1366
            resolution_height: 768
            rotation_degrees: 0
            grayscale: false
            bit_depth: 24
            expected_result: "failure"
            expected_files: 0

          - name: "invalid-crop-missing-fields"
            description: "Invalid crop configuration with missing required fields"
            urls: '[{\\\"url\\\": \\\"https://example.com\\\", \\\"crop\\\": {\\\"x\\\": 100, \\\"width\\\": 400}}]'
            resolution_width: 1366
            resolution_height: 768
            rotation_degrees: 0
            grayscale: false
            bit_depth: 24
            expected_result: "failure"
            expected_files: 0

          - name: "mixed-crop-no-crop"
            description: "Mixed URLs with and without crop configuration"
            urls: '[{\\\"url\\\": \\\"https://example.com\\\", \\\"crop\\\": {\\\"x\\\": 100, \\\"y\\\": 50, \\\"width\\\": 400, \\\"height\\\": 300}}, \\\"https://github.com/jantielens/ha-screenshotter\\\"]'
            resolution_width: 1366
            resolution_height: 768
            rotation_degrees: 0
            grayscale: false
            bit_depth: 24
            expected_result: "success"
            expected_files: 2
            crop_test: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install image analysis tools
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick file

      - name: Set up test directories
        run: |
          mkdir -p test-data-${{ matrix.name }} test-share-${{ matrix.name }}/$SCREENSHOT_SUBFOLDER

      - name: Create test configuration
        run: |
          # Build the configuration
          CONFIG_JSON="{
            \"schedule\": \"*/1 * * * *\",
            \"urls\": \"${{ matrix.urls }}\",
            \"resolution_width\": ${{ matrix.resolution_width }},
            \"resolution_height\": ${{ matrix.resolution_height }},
            \"rotation_degrees\": ${{ matrix.rotation_degrees }},
            \"grayscale\": ${{ matrix.grayscale }},
            \"bit_depth\": ${{ matrix.bit_depth }},
            \"run_once\": true
          }"
          
          # Write to file
          echo "$CONFIG_JSON" > test-data-${{ matrix.name }}/options.json
          echo "=== Test Configuration for ${{ matrix.name }} ==="
          echo "${{ matrix.description }}"
          echo "Expected result: ${{ matrix.expected_result }}"
          echo "Expected files: ${{ matrix.expected_files }}"
          cat test-data-${{ matrix.name }}/options.json

      - name: Build Docker container
        run: |
          cd ha-screenshotter
          docker build -t ha-screenshotter-test-${{ matrix.name }} .

      - name: Run container test
        id: container_test
        continue-on-error: true
        run: |
          echo "Starting container test: ${{ matrix.name }}"
          echo "Description: ${{ matrix.description }}"
          
          # Capture container output and exit code
          set +e
          docker run --rm \
            -v "${GITHUB_WORKSPACE}/test-data-${{ matrix.name }}:/data" \
            -v "${GITHUB_WORKSPACE}/test-share-${{ matrix.name }}:/media" \
            ha-screenshotter-test-${{ matrix.name }} 2>&1 | tee container-output-${{ matrix.name }}.log
          CONTAINER_EXIT_CODE=$?
          set -e
          
          echo "Container exit code: $CONTAINER_EXIT_CODE"
          echo "container_exit_code=$CONTAINER_EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Always continue to validation step
          exit 0

      - name: Validate test results
        id: validate
        run: |
          echo "=== Validating results for ${{ matrix.name }} ==="
          
          TEST_PASSED=true
          VALIDATION_MESSAGES=""
          
          # Check if screenshots directory exists
          SCREENSHOT_DIR="test-share-${{ matrix.name }}/$SCREENSHOT_SUBFOLDER"
          if [ ! -d "$SCREENSHOT_DIR" ]; then
            echo "❌ Screenshot directory not found: $SCREENSHOT_DIR"
            VALIDATION_MESSAGES="${VALIDATION_MESSAGES}- Screenshot directory missing\n"
            TEST_PASSED=false
          else
            echo "✅ Screenshot directory exists: $SCREENSHOT_DIR"
            ls -la "$SCREENSHOT_DIR"
            
            # Count generated files
            ACTUAL_FILES=$(find "$SCREENSHOT_DIR" -name "*.png" | wc -l)
            echo "Files found: $ACTUAL_FILES, Expected: ${{ matrix.expected_files }}"
            
            if [ "${{ matrix.expected_result }}" = "success" ]; then
              if [ "$ACTUAL_FILES" -eq "${{ matrix.expected_files }}" ]; then
                echo "✅ Correct number of screenshots generated"
                VALIDATION_MESSAGES="${VALIDATION_MESSAGES}- Generated $ACTUAL_FILES screenshots ✅\n"
                
                # Validate each screenshot
                for i in $(seq 0 $((ACTUAL_FILES - 1))); do
                  SCREENSHOT_FILE="$SCREENSHOT_DIR/$i.png"
                  if [ -f "$SCREENSHOT_FILE" ]; then
                    # Check file size
                    SIZE=$(stat -c%s "$SCREENSHOT_FILE")
                    echo "Screenshot $i size: $SIZE bytes"
                    
                    if [ "$SIZE" -lt 10 ]; then
                      echo "❌ Screenshot $i too small: $SIZE bytes"
                      VALIDATION_MESSAGES="${VALIDATION_MESSAGES}- Screenshot $i too small ($SIZE bytes) ❌\n"
                      TEST_PASSED=false
                    else
                      echo "✅ Screenshot $i size acceptable: $SIZE bytes"
                      VALIDATION_MESSAGES="${VALIDATION_MESSAGES}- Screenshot $i: $SIZE bytes ✅\n"
                    fi
                    
                    # Check image properties using ImageMagick
                    if command -v identify &> /dev/null; then
                      IMAGE_INFO=$(identify "$SCREENSHOT_FILE" 2>/dev/null || echo "Failed to analyze image")
                      echo "Image info for $i: $IMAGE_INFO"
                      
                      # Extract dimensions and check against expected resolution
                      if [[ "$IMAGE_INFO" =~ ([0-9]+)x([0-9]+) ]]; then
                        IMG_WIDTH="${BASH_REMATCH[1]}"
                        IMG_HEIGHT="${BASH_REMATCH[2]}"
                        
                        # Determine expected dimensions based on test case
                        # For crop tests, we expect the cropped dimensions
                        case "${{ matrix.name }}" in
                          "basic-crop-test")
                            EXPECTED_WIDTH=${{ matrix.expected_crop_width || 400 }}
                            EXPECTED_HEIGHT=${{ matrix.expected_crop_height || 300 }}
                            ;;
                          "crop-with-rotation")
                            # Crop is applied after rotation, so we expect the crop dimensions
                            EXPECTED_WIDTH=${{ matrix.expected_crop_width || 200 }}
                            EXPECTED_HEIGHT=${{ matrix.expected_crop_height || 300 }}
                            ;;
                          "crop-header-only")
                            EXPECTED_WIDTH=${{ matrix.expected_crop_width || 1366 }}
                            EXPECTED_HEIGHT=${{ matrix.expected_crop_height || 100 }}
                            ;;
                          "crop-with-grayscale")
                            EXPECTED_WIDTH=${{ matrix.expected_crop_width || 600 }}
                            EXPECTED_HEIGHT=${{ matrix.expected_crop_height || 400 }}
                            ;;
                          "multi-url-different-crops")
                            # First URL: 400x300, Second URL: 800x600
                            if [ "$i" = "0" ]; then
                              EXPECTED_WIDTH=400
                              EXPECTED_HEIGHT=300
                            else
                              EXPECTED_WIDTH=800
                              EXPECTED_HEIGHT=600
                            fi
                            ;;
                          "multiple-url-crop-test")
                            # Both URLs use same crop: 500x400
                            EXPECTED_WIDTH=${{ matrix.expected_crop_width || 500 }}
                            EXPECTED_HEIGHT=${{ matrix.expected_crop_height || 400 }}
                            ;;
                          "mixed-crop-no-crop")
                            # First URL has crop (400x300), Second URL uses original resolution
                            if [ "$i" = "0" ]; then
                              EXPECTED_WIDTH=400
                              EXPECTED_HEIGHT=300
                            else
                              EXPECTED_WIDTH=${{ matrix.resolution_width }}
                              EXPECTED_HEIGHT=${{ matrix.resolution_height }}
                            fi
                            ;;
                          "per-url-object-format")
                            # First URL: 800x600 grayscale, Second URL: 1920x1080 rotated 90°
                            if [ "$i" = "0" ]; then
                              EXPECTED_WIDTH=800
                              EXPECTED_HEIGHT=600
                            else
                              EXPECTED_WIDTH=1080  # Rotated 90°: height becomes width
                              EXPECTED_HEIGHT=1920 # Rotated 90°: width becomes height
                            fi
                            ;;
                          "per-url-array-with-objects")
                            # First URL: 1024x768 rotated 90°, Second URL: defaults (1366x768) rotated 90°
                            if [ "$i" = "0" ]; then
                              EXPECTED_WIDTH=768   # Rotated 90°: height becomes width
                              EXPECTED_HEIGHT=1024 # Rotated 90°: width becomes height
                            else
                              EXPECTED_WIDTH=768   # Rotated 90°: height becomes width
                              EXPECTED_HEIGHT=1366 # Rotated 90°: width becomes height
                            fi
                            ;;
                          "per-url-mixed-settings")
                            # Both URLs use defaults (800x600) with different rotations
                            if [ "$i" = "0" ]; then
                              EXPECTED_WIDTH=800
                              EXPECTED_HEIGHT=600
                            else
                              EXPECTED_WIDTH=800   # 180° rotation keeps same dimensions
                              EXPECTED_HEIGHT=600
                            fi
                            ;;
                          "per-url-empty-settings")
                            # Both URLs use defaults (1200x800 rotated 270°)
                            EXPECTED_WIDTH=800   # Rotated 270°: height becomes width
                            EXPECTED_HEIGHT=1200 # Rotated 270°: width becomes height
                            ;;
                          *)
                            # Standard logic for non-per-URL and non-crop tests
                            EXPECTED_WIDTH=${{ matrix.resolution_width }}
                            EXPECTED_HEIGHT=${{ matrix.resolution_height }}
                            if [ "${{ matrix.rotation_degrees }}" = "90" ] || [ "${{ matrix.rotation_degrees }}" = "270" ]; then
                              # Swap expected dimensions for 90/270 degree rotations
                              EXPECTED_WIDTH=${{ matrix.resolution_height }}
                              EXPECTED_HEIGHT=${{ matrix.resolution_width }}
                            fi
                            ;;
                        esac
                        
                        if [ "$IMG_WIDTH" = "$EXPECTED_WIDTH" ] && [ "$IMG_HEIGHT" = "$EXPECTED_HEIGHT" ]; then
                          echo "✅ Screenshot $i dimensions correct: ${IMG_WIDTH}x${IMG_HEIGHT}"
                          VALIDATION_MESSAGES="${VALIDATION_MESSAGES}- Screenshot $i resolution: ${IMG_WIDTH}x${IMG_HEIGHT} ✅\n"
                        else
                          echo "❌ Screenshot $i dimensions incorrect: got ${IMG_WIDTH}x${IMG_HEIGHT}, expected ${EXPECTED_WIDTH}x${EXPECTED_HEIGHT}"
                          VALIDATION_MESSAGES="${VALIDATION_MESSAGES}- Screenshot $i resolution: ${IMG_WIDTH}x${IMG_HEIGHT} (expected ${EXPECTED_WIDTH}x${EXPECTED_HEIGHT}) ❌\n"
                          TEST_PASSED=false
                        fi
                      fi
                      
                      # Check grayscale based on test case
                      EXPECT_GRAYSCALE=false
                      case "${{ matrix.name }}" in
                        "per-url-object-format")
                          # First URL should be grayscale, second should not
                          if [ "$i" = "0" ]; then
                            EXPECT_GRAYSCALE=true
                          fi
                          ;;
                        "per-url-array-with-objects")
                          # Both URLs should use global grayscale setting (true)
                          EXPECT_GRAYSCALE=true
                          ;;
                        "per-url-mixed-settings")
                          # First URL explicitly grayscale, second uses global (false)
                          if [ "$i" = "0" ]; then
                            EXPECT_GRAYSCALE=true
                          fi
                          ;;
                        "per-url-empty-settings")
                          # Both URLs use global grayscale setting (true)
                          EXPECT_GRAYSCALE=true
                          ;;
                        *)
                          # Use global grayscale setting
                          if [ "${{ matrix.grayscale }}" = "true" ]; then
                            EXPECT_GRAYSCALE=true
                          fi
                          ;;
                      esac
                      
                      if [ "$EXPECT_GRAYSCALE" = "true" ]; then
                        # Check if image is grayscale using multiple methods
                        COLOR_TYPE=$(identify -ping -format "%[colorspace]" "$SCREENSHOT_FILE" 2>/dev/null || echo "Unknown")
                        # Also check PNG color type from file command
                        PNG_TYPE=""
                        if [[ "$FILE_INFO" =~ grayscale ]]; then
                          PNG_TYPE="grayscale"
                        elif [[ "$FILE_INFO" =~ RGB ]]; then
                          PNG_TYPE="RGB"
                        fi
                        
                        # Check if it's actually grayscale by examining unique colors
                        UNIQUE_COLORS=$(identify -ping -format "%[colors]" "$SCREENSHOT_FILE" 2>/dev/null || echo "0")
                        
                        if [[ "$COLOR_TYPE" =~ Gray|Grayscale ]] || [[ "$PNG_TYPE" == "grayscale" ]]; then
                          echo "✅ Screenshot $i is grayscale as expected (colorspace: $COLOR_TYPE, PNG type: $PNG_TYPE)"
                          VALIDATION_MESSAGES="${VALIDATION_MESSAGES}- Screenshot $i: Grayscale ✅\n"
                        else
                          # Additional check: if it has very few colors, it might still be grayscale
                          EXPECTED_BIT_DEPTH=24
                          case "${{ matrix.name }}" in
                            "per-url-mixed-settings")
                              if [ "$i" = "0" ]; then
                                EXPECTED_BIT_DEPTH=1
                              else
                                EXPECTED_BIT_DEPTH=8
                              fi
                              ;;
                            *)
                              EXPECTED_BIT_DEPTH=${{ matrix.bit_depth }}
                              ;;
                          esac
                          
                          if [ "$UNIQUE_COLORS" -le 256 ] && [ "$EXPECTED_BIT_DEPTH" -le 8 ]; then
                            echo "✅ Screenshot $i appears grayscale (colorspace: $COLOR_TYPE, colors: $UNIQUE_COLORS, PNG type: $PNG_TYPE)"
                            VALIDATION_MESSAGES="${VALIDATION_MESSAGES}- Screenshot $i: Likely grayscale ($UNIQUE_COLORS colors) ✅\n"
                          else
                            echo "❌ Screenshot $i colorspace: $COLOR_TYPE, PNG type: $PNG_TYPE (expected grayscale)"
                            VALIDATION_MESSAGES="${VALIDATION_MESSAGES}- Screenshot $i: $COLOR_TYPE/$PNG_TYPE (expected grayscale) ❌\n"
                            TEST_PASSED=false
                          fi
                        fi
                      else
                        echo "ℹ️  Screenshot $i: Not checking grayscale (not expected for this URL)"
                      fi
                      
                      # Check bit depth only for grayscale images
                      if [ "$EXPECT_GRAYSCALE" = "true" ]; then
                        # Check bit depth using file command for more accurate PNG bit depth detection
                        BIT_DEPTH_IDENTIFY=$(identify -ping -format "%[depth]" "$SCREENSHOT_FILE" 2>/dev/null || echo "Unknown")
                        # Use file command to get actual PNG bit depth from file header
                        FILE_INFO=$(file "$SCREENSHOT_FILE" 2>/dev/null || echo "")
                        if [[ "$FILE_INFO" =~ ([0-9]+)-bit ]]; then
                          ACTUAL_BIT_DEPTH="${BASH_REMATCH[1]}"
                        else
                          ACTUAL_BIT_DEPTH="$BIT_DEPTH_IDENTIFY"
                        fi
                        
                        # Determine expected bit depth based on test case
                        case "${{ matrix.name }}" in
                          "per-url-object-format")
                            # Both URLs use global bit depth (8)
                            EXPECTED_DEPTH=8
                            ;;
                          "per-url-array-with-objects")
                            # Both URLs use global bit depth (4)
                            EXPECTED_DEPTH=4
                            ;;
                          "per-url-mixed-settings")
                            # First URL: 1-bit, Second URL: 8-bit
                            if [ "$i" = "0" ]; then
                              EXPECTED_DEPTH=1
                            else
                              EXPECTED_DEPTH=8
                            fi
                            ;;
                          "per-url-empty-settings")
                            # Both URLs use global bit depth (4)
                            EXPECTED_DEPTH=4
                            ;;
                          *)
                            # Use global bit depth
                            EXPECTED_DEPTH=${{ matrix.bit_depth }}
                            # Note: Invalid bit depth values now cause container failure
                            if [ "$EXPECTED_DEPTH" = "99" ]; then
                              EXPECTED_DEPTH=8  # This case should now never reach here due to validation
                            fi
                            ;;
                        esac
                        
                        echo "Screenshot $i bit depth: $ACTUAL_BIT_DEPTH (identify reported: $BIT_DEPTH_IDENTIFY, expected: $EXPECTED_DEPTH)"
                        
                        # Validate bit depth for grayscale images only
                        if [ "$ACTUAL_BIT_DEPTH" = "$EXPECTED_DEPTH" ]; then
                          echo "✅ Screenshot $i bit depth correct: $ACTUAL_BIT_DEPTH"
                          VALIDATION_MESSAGES="${VALIDATION_MESSAGES}- Screenshot $i bit depth: $ACTUAL_BIT_DEPTH ✅\n"
                        else
                          echo "❌ Screenshot $i bit depth: $ACTUAL_BIT_DEPTH (expected: $EXPECTED_DEPTH)"
                          VALIDATION_MESSAGES="${VALIDATION_MESSAGES}- Screenshot $i bit depth: $ACTUAL_BIT_DEPTH (expected $EXPECTED_DEPTH) ❌\n"
                          TEST_PASSED=false
                        fi
                      else
                        echo "ℹ️  Screenshot $i: Skipping bit depth validation (color image)"
                        VALIDATION_MESSAGES="${VALIDATION_MESSAGES}- Screenshot $i: Bit depth check skipped (color image) ℹ️\n"
                      fi
                    fi
                  fi
                done
              else
                echo "❌ Wrong number of screenshots: got $ACTUAL_FILES, expected ${{ matrix.expected_files }}"
                VALIDATION_MESSAGES="${VALIDATION_MESSAGES}- Generated $ACTUAL_FILES screenshots (expected ${{ matrix.expected_files }}) ❌\n"
                TEST_PASSED=false
              fi
            else
              # Expected failure case
              if [ "$ACTUAL_FILES" -eq 0 ] || [ "${{ steps.container_test.outputs.container_exit_code }}" != "0" ]; then
                echo "✅ Test correctly failed as expected"
                VALIDATION_MESSAGES="${VALIDATION_MESSAGES}- Test failed as expected ✅\n"
              else
                echo "❌ Test should have failed but didn't"
                VALIDATION_MESSAGES="${VALIDATION_MESSAGES}- Test should have failed but generated $ACTUAL_FILES files ❌\n"
                TEST_PASSED=false
              fi
            fi
          fi
          
          # Output results
          echo "test_passed=$TEST_PASSED" >> $GITHUB_OUTPUT
          echo -e "$VALIDATION_MESSAGES" > validation-messages-${{ matrix.name }}.txt
          
          # Print container logs for debugging
          echo "=== Container Output ==="
          cat container-output-${{ matrix.name }}.log || echo "No container output available"
          
          if [ "$TEST_PASSED" = "true" ]; then
            echo "🎉 Test ${{ matrix.name }} PASSED"
          else
            echo "💥 Test ${{ matrix.name }} FAILED"
            if [ "${{ matrix.expected_result }}" = "success" ]; then
              exit 1
            fi
          fi

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.name }}
          path: |
            test-share-${{ matrix.name }}/${{ env.SCREENSHOT_SUBFOLDER }}/
            container-output-${{ matrix.name }}.log
            validation-messages-${{ matrix.name }}.txt
          retention-days: 7

  # Summary job to collect all matrix results
  test-summary:
    if: ${{ always() && (github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && fromJson(github.event.inputs.run_all_tests || 'true'))) }}
    needs: matrix-test
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate test summary
        run: |
          echo "# 🧪 HA Screenshotter Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Case | Description | Expected Result | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------------|----------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Note: This is a simplified summary. In a real implementation, 
          # we would need to collect the actual results from the matrix jobs.
          # For now, we'll show the test cases that were configured.
          
          echo "| basic-test | Single URL, no grayscale, full bit depth | Success | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| multi-grayscale-medium | Two URLs, grayscale, medium bit depth | Success | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY  
          echo "| multi-grayscale-minimal | Two URLs, grayscale, minimal bit depth | Success | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| invalid-url | Non-existent URL test | Failure | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| malformed-urls | Invalid JSON format for URLs | Failure | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| invalid-bit-depth | Invalid bit depth value | Failure | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| invalid-resolution-width | Invalid negative resolution width | Failure | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| invalid-rotation | Invalid rotation degrees | Failure | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Per-URL Configuration Tests" >> $GITHUB_STEP_SUMMARY
          echo "| per-url-object-format | Per-URL settings using object format | Success | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| per-url-array-with-objects | Per-URL settings using array with objects | Success | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| per-url-mixed-settings | Per-URL with different bit depths and grayscale | Success | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| per-url-empty-settings | Per-URL with empty settings (defaults) | Success | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| per-url-invalid-width | Per-URL with invalid width value | Failure | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| per-url-invalid-rotation | Per-URL with invalid rotation value | Failure | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| per-url-invalid-bit-depth | Per-URL with invalid bit depth | Failure | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| per-url-malformed-json | Per-URL with malformed JSON structure | Failure | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✂️ Cropping Functionality Tests" >> $GITHUB_STEP_SUMMARY
          echo "| Test Case | Description | Expected Result | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------------|----------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| basic-crop-test | Single URL with basic cropping | Success | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| crop-with-rotation | Cropping after 90-degree rotation | Success | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| crop-header-only | Crop to extract header section only | Success | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| crop-with-grayscale | Cropping with grayscale and bit depth | Success | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| multi-url-different-crops | Multiple URLs with different crops | Success | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| multiple-url-crop-test | Multiple URLs with same crop configuration | Success | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| mixed-crop-no-crop | Mixed URLs with and without crop configuration | Success | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ❌ Cropping Error Cases" >> $GITHUB_STEP_SUMMARY
          echo "| Test Case | Description | Expected Result | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------------|----------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| invalid-crop-negative-coords | Invalid crop with negative coordinates | Failure | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| invalid-crop-zero-dimensions | Invalid crop with zero width/height | Failure | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| invalid-crop-exceeds-bounds | Crop area exceeds image dimensions | Failure | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| invalid-crop-missing-fields | Missing required crop fields | Failure | ${{ needs.matrix-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Overall Result" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.matrix-test.result }}" = "success" ]; then
            echo "**✅ All tests completed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "**❌ Some tests failed. Check individual test results above.**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Test artifacts are available for download with detailed validation results." >> $GITHUB_STEP_SUMMARY
